{"version":3,"file":"static/js/548.bff7b0c9.chunk.js","mappings":"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","sources":["Utils/validators/validators.tsx","common/FormControls.tsx","components/Dialogs/DialogItem/DialogItem.tsx","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Messages/Message/Message.tsx","components/Dialogs/Messages/AddMessageForm.tsx","components/Dialogs/Messages/Message/MessagesContainer.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","webpack://samurai-way/./src/common/FormControls.module.css?81d7"],"sourcesContent":["import React from 'react'\r\n\r\nexport const required = (value: string) => {\r\nif (value) return undefined\r\nreturn 'Field is required'\r\n}\r\n\r\n//замыкание\r\nexport const maxLengthCreator = (MaxLength: number) => (value:string) =>{\r\n    if (value.length > MaxLength) return `Max length is ${MaxLength} symbols`\r\n    return undefined\r\n}","import {WrappedFieldInputProps, WrappedFieldMetaProps} from \"redux-form\";\r\nimport {HTMLInputTypeAttribute} from \"react\";\r\nimport style from './FormControls.module.css'\r\n\r\ntype FormsControlsType = {\r\n    input: WrappedFieldInputProps\r\n    meta: WrappedFieldMetaProps\r\n    placeholder?: string\r\n    type?: HTMLInputTypeAttribute\r\n    autoFocus?: boolean\r\n    child: any\r\n    element: any\r\n}\r\n\r\nexport  const FormControls = (props:FormsControlsType) => {\r\n    const hasError = props.meta.touched && props.meta.error\r\n    return (\r\n        <div className={style.formControl + \" \" + (hasError ?  style.error : \"\") }>\r\n            <div>\r\n              <props.element  {...props.input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{props.meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea = (props:FormsControlsType) => {//пропсы будут содержать все, кроме инпута и мета\r\n    return <FormControls {...props} element = {\"textarea\"}></FormControls>\r\n}\r\n\r\nexport const Input = (props:FormsControlsType) => {\r\nreturn <FormControls {...props} element = {\"input\"}></FormControls>\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport type DialogItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\n\r\nexport const DialogItem = ({name, id}: DialogItemType) => {\r\n    let path = '/dialogs/' + id\r\n    return (\r\n        <div>\r\n            <Link to={path}>{name}</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__W7IBH\",\"dialogItem\":\"Dialogs_dialogItem__09FN2\",\"message\":\"Dialogs_message__w0gyr\",\"messageBlock\":\"Dialogs_messageBlock__o5xMY\"};","import React from 'react';\r\n\r\n\r\nexport type MessageType = {\r\n    id:number\r\n    message: string\r\n}\r\nexport const Message = ({id, message}: MessageType) => {\r\n    return (\r\n        <div>\r\n            {message}\r\n        </div>\r\n    );\r\n};\r\n\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport {TextArea} from \"../../../common/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../../Utils/validators/validators\";\r\n\r\nexport type AddMessageFormType = {\r\n    textarea: string\r\n    newMessageBody:string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(50)\r\nexport const AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                component={TextArea}\r\n                name=\"newMessageBody\"\r\n                label=\"Print message here\"\r\n                placeholder=\"Placeholder\"\r\n                validate={[required, maxLength]}\r\n            />\r\n            <div className={s.messageButton}>\r\n                <button>\r\n                    send message\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageReduxForm = reduxForm<AddMessageFormType>({form: 'addMessage'})(AddMessageForm)\r\n","import React from 'react'\r\nimport {Messages} from \"../Messages\";\r\nimport {addMessageAC} from \"src/Redux/dialogs-reducer\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"src/Redux/redux-store\";\r\nimport {MessageType} from \"./Message\";\r\nimport {WithAuthRedirect} from \"src/hoc/withAuthRedirect\";\r\n\r\ntype MapStatePropsType = {\r\n    message: string\r\n    messages: Array<MessageType>\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: (newMessageBody: string) => void\r\n\r\n}\r\nexport type PostsPropsType = MapStatePropsType & MapDispatchPropsType\r\nconst MapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        message: state.dialogsReducer.newMessageText,\r\n        messages: state.dialogsReducer.messages,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nconst MapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addMessage: (newMessageBody) => {\r\n            dispatch(addMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(MapStateToProps, MapDispatchToProps), WithAuthRedirect)(Messages)\r\n\r\n","import React from 'react';\r\nimport s from \"../Dialogs.module.css\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {PostsPropsType} from \"./Message/MessagesContainer\";\r\nimport {AddMessageFormType, AddMessageReduxForm} from \"./AddMessageForm\";\r\n\r\nexport const Messages = (props: PostsPropsType) => {\r\n\r\n    const onSubmit = (values: AddMessageFormType) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n\r\n    let messageElements = props.messages.map((el, index) => {\r\n        return (\r\n            <div key={index}>\r\n            <Message id={el.id} message={el.message}/>\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div>\r\n            <div className={s.message}>\r\n                {messageElements}\r\n            </div>\r\n            <div className={s.messageBlock}>\r\n                <div className={s.messageInput}>\r\n                 <AddMessageReduxForm onSubmit={onSubmit} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport s from './Dialogs.module.css';\r\nimport MessagesContainer from \"./Messages/Message/MessagesContainer\";\r\nimport {store} from \"src/Redux/redux-store\";\r\n\r\ntype DialogsDataType = {\r\n    id: number\r\n    name: string\r\n\r\n}\r\n const Dialogs = () => {\r\n    const state = store.getState().dialogsReducer\r\n    let dialogsElements = state.dialogsData.map((el:DialogsDataType) => <DialogItem key={el.id} name={el.name} id={el.id}/>)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItem}>\r\n                {dialogsElements}\r\n            </div>\r\n          <MessagesContainer />\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs;\r\n","import React, {FC} from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../Redux/redux-store\";\r\n\r\nlet mapStatePropsForRedirect = (state: AppRootStateType) => ({isAuth: state.auth.isAuth} as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {}\r\n\r\nexport function WithAuthRedirect<WCP>(WrapperComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\r\n        let {isAuth, ...restProps} = props;\r\n              if (!isAuth) return <Navigate replace to={'/login'}/>\r\n\r\n        return <WrapperComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    return connect<MapPropsType,DispatchPropsType, WCP, AppRootStateType>(mapStatePropsForRedirect,{})(RedirectComponent);\r\n}\r\n\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__3zalB\",\"error\":\"FormControls_error__zx6fp\",\"formSummaryError\":\"FormControls_formSummaryError__Y07zz\"};"],"names":["required","value","maxLengthCreator","MaxLength","length","FormControls","props","hasError","meta","touched","error","className","style","element","input","TextArea","Input","DialogItem","name","path","id","to","Message","message","maxLength","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","label","placeholder","validate","s","compose","connect","state","dialogsReducer","newMessageText","messages","isAuth","auth","dispatch","addMessage","newMessageBody","addMessageAC","WithAuthRedirect","messageElements","map","el","index","values","dialogsElements","store","dialogsData","MessagesContainer","mapStatePropsForRedirect","WrapperComponent","restProps","source","excluded","key","i","target","objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call","replace"],"sourceRoot":""}