{"version":3,"file":"static/js/633.208d3c8e.chunk.js","mappings":"sKAEO,IAAMA,EAAW,SAACC,GACzB,IAAIA,EACJ,MAAO,mBACP,EAGaC,EAAmB,SAACC,GAAiB,OAAK,SAACF,GACpD,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAS,WAEnE,CAAC,C,iHCGaE,EAAe,SAACC,GAC1B,IAAMC,EAAWD,EAAME,KAAKC,SAAWH,EAAME,KAAKE,MAClD,OACI,iBAAKC,UAAWC,EAAAA,EAAAA,YAAoB,KAAOL,EAAYK,EAAAA,EAAAA,MAAc,IAAK,WACtE,0BACE,SAACN,EAAMO,SAAO,kBAAMP,EAAMQ,OAAWR,MAEtCC,IAAY,0BAAOD,EAAME,KAAKE,UAG3C,EAEaK,EAAW,SAACT,GACrB,OAAO,SAACD,GAAY,kBAAKC,GAAK,IAAEO,QAAW,aAC/C,EAEaG,EAAQ,SAACV,GACtB,OAAO,SAACD,GAAY,kBAAKC,GAAK,IAAEO,QAAW,UAC3C,C,0ICCaI,GAAiBC,EAAAA,EAAAA,GAAkD,CAACC,KAAM,SAAzDD,EAtBoF,SAAH,GAAyC,IAApCE,EAAY,EAAZA,aAAaV,EAAK,EAALA,MAAMW,EAAU,EAAVA,WACnI,OACI,4BACI,mCACA,kBAAMC,SAAUF,EAAa,WACzB,0BAAK,SAACG,EAAA,EAAK,CAACC,SAAU,CAACxB,EAAAA,GAAWyB,YAAa,QAASC,KAAM,QAASC,UAAWX,EAAAA,QAClF,0BAAK,SAACO,EAAA,EAAK,CAACC,SAAU,CAACxB,EAAAA,GAAWyB,YAAa,WAAYC,KAAM,WAAYE,KAAM,WAAYD,UAAWX,EAAAA,QAC1G,4BAAK,SAACO,EAAA,EAAK,CAACK,KAAM,WAAYF,KAAM,aAAcC,UAAWX,EAAAA,KAAQ,iBAEpEK,IAAc,gBAAKQ,IAAKR,IACxBA,IAAe,0BAAK,SAACE,EAAA,EAAK,CAACC,SAAU,CAACxB,EAAAA,GAAWyB,YAAa,qBAAuBC,KAAM,UAAWC,UAAWX,EAAAA,QAClH,2BACKN,IAAS,gBAAKC,UAAWC,EAAAA,EAAAA,iBAAuB,SAC5CF,KAEL,8CAKpB,I,8BCcA,GAAeoB,EAAAA,EAAAA,KANS,SAACC,GAAuB,MAAyB,CACrEC,OAAQD,EAAME,KAAKD,OACnBX,WAAYU,EAAME,KAAKZ,WAC1B,GAGuC,CAACa,MAAAA,EAAAA,IAAzC,EAtBiE,SAAC5B,GAQ9D,OAAIA,EAAM0B,QAAe,SAAC,KAAQ,CAACG,SAAO,EAACC,GAAI,cAE3C,0BACI,SAACnB,EAAc,CAACK,SATP,SAACe,GACdC,QAAQC,IAAI,WAAYF,GACxB/B,EAAM4B,MAAMG,EAASG,MAAOH,EAASI,SAAUJ,EAASK,WAAYL,EAASM,QACjF,EAM4CtB,WAAYf,EAAMe,cAGlE,G,qBCpCA,KAAgB,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,uC","sources":["Utils/validators/validators.tsx","common/FormControls.tsx","components/Login/LoginForm.tsx","components/Login/Login.tsx","webpack://samurai-way/./src/common/FormControls.module.css?81d7"],"sourcesContent":["import React from 'react'\r\n\r\nexport const required = (value: string) => {\r\nif (value) return undefined\r\nreturn 'Field is required'\r\n}\r\n\r\n//замыкание\r\nexport const maxLengthCreator = (MaxLength: number) => (value:string) =>{\r\n    if (value.length > MaxLength) return `Max length is ${MaxLength} symbols`\r\n    return undefined\r\n}","import {WrappedFieldInputProps, WrappedFieldMetaProps} from \"redux-form\";\r\nimport {HTMLInputTypeAttribute} from \"react\";\r\nimport style from './FormControls.module.css'\r\n\r\ntype FormsControlsType = {\r\n    input: WrappedFieldInputProps\r\n    meta: WrappedFieldMetaProps\r\n    placeholder?: string\r\n    type?: HTMLInputTypeAttribute\r\n    autoFocus?: boolean\r\n    child: any\r\n    element: any\r\n}\r\n\r\nexport  const FormControls = (props:FormsControlsType) => {\r\n    const hasError = props.meta.touched && props.meta.error\r\n    return (\r\n        <div className={style.formControl + \" \" + (hasError ?  style.error : \"\") }>\r\n            <div>\r\n              <props.element  {...props.input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{props.meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea = (props:FormsControlsType) => {//пропсы будут содержать все, кроме инпута и мета\r\n    return <FormControls {...props} element = {\"textarea\"}></FormControls>\r\n}\r\n\r\nexport const Input = (props:FormsControlsType) => {\r\nreturn <FormControls {...props} element = {\"input\"}></FormControls>\r\n}\r\n\r\n\r\n","import React, {useRef} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/FormControls\";\r\nimport {required} from \"../../Utils/validators/validators\";\r\nimport  style from \"../../common/FormControls.module.css\"\r\nimport {LoginFormValuesType} from \"src/components/Login/Login\";\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit,error,captchaUrl}) => {\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <div><Field validate={[required]} placeholder={'Email'} name={\"email\"} component={Input}/></div>\r\n                <div><Field validate={[required]} placeholder={'Password'} name={\"password\"} type={\"password\"} component={Input}/></div>\r\n                <div><Field type={\"checkbox\"} name={\"rememberMe\"} component={Input}/>remember me</div>\r\n\r\n                {captchaUrl && <img src={captchaUrl} />}\r\n                {captchaUrl &&  <div><Field validate={[required]} placeholder={'Symbols from image'}  name={'captcha'} component={Input}/></div>}\r\n                <div>\r\n                    {error && <div className={style.formSummaryError}>\r\n                        {error}\r\n                    </div>}\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n","import React from 'react';\r\nimport {LoginReduxForm} from \"./LoginForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"src/Redux/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"src/Redux/redux-store\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email:string, password:string, rememberMe:boolean, captcha: string)=>void\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    captcha: string\r\n    email: string\r\n    password:string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> =(props) => {\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        console.log('captcha:', formData)\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n\r\n    if (props.isAuth) return <Navigate replace to={'/profile'}/>\r\n    return (\r\n        <div>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {login}) (Login)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__3zalB\",\"error\":\"FormControls_error__zx6fp\",\"formSummaryError\":\"FormControls_formSummaryError__Y07zz\"};"],"names":["required","value","maxLengthCreator","MaxLength","length","FormControls","props","hasError","meta","touched","error","className","style","element","input","TextArea","Input","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","Field","validate","placeholder","name","component","type","src","connect","state","isAuth","auth","login","replace","to","formData","console","log","email","password","rememberMe","captcha"],"sourceRoot":""}