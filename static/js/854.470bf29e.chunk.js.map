{"version":3,"file":"static/js/854.470bf29e.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__7iw08\",\"mainPhoto\":\"ProfileInfo_mainPhoto__xeWV1\",\"button\":\"ProfileInfo_button__UZKZB\",\"contact\":\"ProfileInfo_contact__-w3ZB\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusWithHooksType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusWithHooksType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    },[props.status])     // синхронизация, когда измениться статус\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status);\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n            {!editMode &&\r\n                <div>\r\n                   <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status || \"---\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {Contact} from \"./ProfileInfo\";\r\nimport {ProfileType} from \"../Profile\";\r\nimport styles from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\n// export type ContactsType = {\r\n//     github: string\r\n//     vk: string\r\n//     facebook: string\r\n//     instagram: string\r\n//     twitter: string\r\n//     website: string\r\n//     youtube: string\r\n//     mainLink: string\r\n// }\r\n//\r\n// export type ProfileDataFormType = {\r\n//     profile : ProfileType\r\n//     error:string\r\n//     fullName:string\r\n//     lookingForAJob:string\r\n//     lookingForAJobDescription:string\r\n//     contacts: ContactsType\r\n// }\r\n\r\nexport type ProfileFormData =  {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string | null\r\n}\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileFormData, PropsType> & PropsType> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n            {props.error && <div className={styles.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>: {<Field placeholder={\"Full name\"} name={\"fullName\"}\r\n                                          validate={[]}\r\n                                          component={Input}/>}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {<Field placeholder={\"\"} name={\"lookingForAJob\"}\r\n                                                  validate={[]}\r\n                                                  component={Input} type=\"checkbox\"\r\n\r\n            />}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: {<Field placeholder={\"My professional skills\"}\r\n                                                       name={\"lookingForAJobDescription\"}\r\n                                                       validate={[]}\r\n                                                       component={Textarea}/>}\r\n            </div>\r\n\r\n            <div>\r\n                <b>About me</b>: {<Field placeholder={\"About me\"} name={\"aboutMe\"}\r\n                                         validate={[]}\r\n                                         component={Textarea}/>}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(props.profile.contacts).map(key => {\r\n                return <div key={key} className={s.contact}>\r\n                    <b>{key}:{<Field placeholder={key} name={\"contacts.\" + key}\r\n                                     validate={[]}\r\n                                     component={Input}/>}</b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n// <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileFormData, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport {ProfilePropsType, ProfileType} from \"../Profile\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport myPhoto from \"../../../assets/imges/myPhoto.png\";\r\nimport ProfileDataFormReduxForm, {ProfileFormData} from \"./ProfileDataForm\";\r\nimport {useAppSelector} from \"src/redux/redux-store\";\r\n\r\nconst ProfileInfo = (props: ProfilePropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        const files = e.currentTarget.files;\r\n\r\n        if (files && files.length) {\r\n\r\n            props.savePhoto(files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileFormData) => {\r\n         props.saveProfile(formData).then(()=> {\r\n             setEditMode(false)\r\n         })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img src={props.profile.photos.large || myPhoto} className={s.mainPhoto}/>\r\n                    {\r\n                        props.isOwner && <label htmlFor=\"load_avatar\">\r\n                            <div className={s.button}>image</div>\r\n                        </label>\r\n                    }\r\n                    <input id={\"load_avatar\"} hidden type={\"file\"} onChange={onMainPhotoSelected}/>\r\n                    {editMode\r\n                        ? <ProfileDataFormReduxForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n                        : <ProfileData goToEditMode={() => {\r\n                            setEditMode(true)\r\n                        }} profile={props.profile} isOwner={props.isOwner}/>}\r\n                    <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport type ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\n\r\n\r\nexport const ProfileData = (props: ProfileDataType) => {\r\n    const profile = useAppSelector(state=>state.profilePage.profile)\r\n    const {contacts} = props.profile\r\n\r\n    type typeCont = keyof typeof contacts\r\n    const keysContackts:typeCont[] = Object.keys(props.profile.contacts) as typeCont[]\r\n\r\n\r\n    const drawContacts = keysContackts.map((key: typeCont) => {\r\n        return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n    })\r\n    return (\r\n        <div>\r\n            {props.isOwner && <div>\r\n                <button onClick={props.goToEditMode}>edit</button>\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {\r\n                props.profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {props.profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {props.profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>:{keysContackts}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//& ProfileType\r\nexport type ContactType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\n\r\nexport const Contact = (props: ContactType) => {\r\n\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{props.contactTitle}</b>: {props.contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__ACMDS\",\"posts\":\"MyPosts_posts__9KRJd\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__e9bws\"};","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PropsType) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://oper.ru/static/data/gallery/l1048753984.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;","import React, {useMemo} from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type PostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<PostFormDataType>> = (props) => {\r\n\r\n    const maxLengthCreatorWrapper = useMemo(() =>\r\n            maxLengthCreator(10)\r\n        , []);\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"newPostText\"} placeholder={\"Post Message\"}\r\n                       validate={[required, maxLengthCreatorWrapper]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddNewPostFormRedux = reduxForm<PostFormDataType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {MyPostsContainerProps} from \"./MyPostsContainer\";\r\nimport {AddNewPostFormRedux, PostFormDataType} from \"./AddNewPostForm\";\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsContainerProps) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCont}/>)\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values: PostFormDataType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\n const mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText:string) => {    //iz\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nexport type MyPostsContainerProps = ReturnType<typeof mapDispatchToProps> & ReturnType<typeof mapStateToProps>\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileFormData} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string | null,\r\n    contacts: ContactsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType\r\n}\r\ntype ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\nexport type ProfilePropsType = {\r\n    profile : ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner:boolean\r\n    savePhoto:(file: File) => void\r\n    saveProfile:(profile: ProfileFormData) => Promise<void>\r\n}\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile, {ProfileType} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getFriendsProfile,\r\n    getStatus,\r\n    getUserProfile,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileFormData} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n    private userId: string | null = null;\r\n\r\n    refreshProfile() {\r\n        this.userId = this.props.match.params.userId;\r\n        if (!this.userId) {\r\n            this.userId = String(this.props.authorizedUserId)\r\n            if (!this.userId) {\r\n                this.props.history.push(\"login\")\r\n            }\r\n        }\r\n        this.props.getFriendsProfile()\r\n        this.props.getUserProfile(this.userId);\r\n        this.props.getStatus(this.userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    isOwner={!this.props.match.params.userId}\r\n                    //@ts-ignore\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfile={this.props.saveProfile}\r\n                />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n    friends: state.profilePage.friends\r\n})\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    getFriendsProfile: () => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile:(profile: ProfileFormData) => Promise<void>\r\n}\r\n\r\nexport type ProfilePropsType =\r\n    ReturnType<typeof mapStateToProps>\r\n    & MapDispatchToPropsType\r\n    & RouteComponentProps<PathParamsType>\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, getFriendsProfile, savePhoto, saveProfile}),//\r\n    withRouter,\r\n    // WithAuthRedirect\r\n)(ProfileContainer);"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","onSubmit","handleSubmit","error","className","styles","Field","placeholder","name","validate","component","Input","type","Textarea","Object","keys","profile","contacts","map","key","s","ProfileData","useAppSelector","state","profilePage","keysContackts","Contact","contactTitle","contactValue","isOwner","onClick","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Preloader","src","photos","large","myPhoto","htmlFor","id","hidden","files","length","savePhoto","initialValues","formData","saveProfile","then","message","likesCount","AddNewPostFormRedux","maxLengthCreatorWrapper","useMemo","maxLengthCreator","required","React","postsElements","posts","p","likesCont","values","addPost","newPostText","connect","dispatch","addPostActionCreator","MyPosts","ProfileContainer","userId","this","match","params","String","authorizedUserId","history","push","getFriendsProfile","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","friends","withRouter"],"sourceRoot":""}